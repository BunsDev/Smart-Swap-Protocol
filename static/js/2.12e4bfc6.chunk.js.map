{"version":3,"sources":["components/AddressInputPanel/index.js","components/ExchangePage/index.jsx"],"names":["InputPanel","styled","div","theme","flexColumnNoWrap","transparentize","shadowColor","inputBackground","ContainerRow","error","salmonRed","mercuryGray","InputContainer","LabelRow","flexRowNoWrap","doveGray","LabelContainer","InputRow","Input","input","royalBlue","placeholderGray","AddressInputPanel","title","initialInput","onChange","onError","t","useTranslation","library","useWeb3React","useState","address","setInput","debouncedInput","useDebounce","undefined","name","data","setData","setError","useEffect","stale","isAddress","lookupAddress","then","catch","resolveName","type","autoComplete","autoCorrect","autoCapitalize","spellCheck","placeholder","event","target","value","checksummedInput","GAS_MARGIN","ethers","utils","bigNumberify","DownArrowBackground","DownArrow","clickable","active","rest","chaliceGray","ExchangeRateWrapper","ExchangeRate","span","Flex","calculateEtherTokenOutputFromInput","inputAmount","inputReserve","outputReserve","inputAmountWithFee","mul","numerator","denominator","add","calculateEtherTokenInputFromOutput","outputAmount","sub","constants","One","getInitialSwapState","state","independentValue","exactFieldURL","exactAmountURL","dependentValue","independentField","inputCurrency","inputCurrencyURL","outputCurrency","outputCurrencyURL","initialCurrency","swapStateReducer","action","payload","field","currency","newInputCurrency","newOutputCurrency","getExchangeRate","inputValue","inputDecimals","outputValue","outputDecimals","invert","factor","pow","ExchangePage","sending","params","nft","account","chainId","urlAddedTokens","addTransaction","useTransactionAdder","initialSlippage","slippage","Number","parseInt","isNaN","brokenTokenWarning","setBrokenTokenWarning","deadlineFromNow","setDeadlineFromNow","rawSlippage","setRawSlippage","rawTokenSlippage","setRawTokenSlippage","allowedSlippageBig","tokenAllowedSlippageBig","ReactGA","pageview","window","location","pathname","search","useReducer","exactField","exactAmount","swapState","dispatchSwapState","i","brokenTokens","length","toLowerCase","recipient","setRecipient","recipientError","setRecipientError","swapType","getSwapType","useTokenDetails","inputSymbol","symbol","decimals","inputExchangeAddress","exchangeAddress","outputSymbol","outputExchangeAddress","inputExchangeContract","useExchangeContract","outputExchangeContract","ctokencontract","useCTokenContract","contract","daiContract","useDAIContract","inputAllowance","useAddressAllowance","useExchangeReserves","inputReserveETH","reserveETH","inputReserveToken","reserveToken","outputReserveETH","outputReserveToken","inputBalance","useAddressBalance","outputBalance","inputBalanceFormatted","isInteger","amountFormatter","Math","min","outputBalanceFormatted","independentDecimals","dependentDecimals","independentValueParsed","setIndependentValueParsed","dependentValueFormatted","inputValueParsed","inputValueFormatted","outputValueParsed","outputValueFormatted","independentError","setIndependentError","parsedValue","parseUnits","lte","Zero","gte","MaxUint256","Error","token","tokenAllowedSlippage","allowedSlippage","offset","minimum","maximum","lt","gt","calculateSlippageBounds","dependentValueMinumum","dependentValueMaximum","inputError","setInputError","showUnlock","setShowUnlock","inputValueCalculation","amount","calculatedDependentValue","reserveETHFirst","reserveTokenFirst","reserveETHSecond","reserveTokenSecond","intermediateValue","createBrowserHistory","push","inverted","setInverted","exchangeRate","exchangeRateInverted","marketRate","firstRate","secondRate","getMarketRate","percentSlippage","isZero","abs","percentSlippageFormatted","slippageWarning","parseEther","highSlippageWarning","isValid","estimatedText","formatBalance","a","category","deadline","ceil","Date","now","toString","inputEthPerToken","ethTransactionSize","label","estimate","approve","method","args","estimatedGasLimit","gasLimit","calculateGasMargin","response","mint","getAccountSnapshot","snapshot","redeem","ethToTokenTransferInput","ethToTokenSwapInput","tokenToEthTransferInput","tokenToEthSwapInput","tokenToTokenTransferInput","tokenToTokenSwapInput","ethToTokenTransferOutput","ethToTokenSwapOutput","tokenToEthTransferOutput","tokenToEthSwapOutput","tokenToTokenTransferOutput","tokenToTokenSwapOutput","dimension1","hash","customSlippageError","setcustomSlippageError","toggleWalletModal","useWalletModalToggle","newInputDetected","INITIAL_TOKENS_CONTEXT","hasOwnProperty","newOutputDetected","showInputWarning","setShowInputWarning","showOutputWarning","setShowOutputWarning","onDismiss","description","extraText","extraTextClickHander","valueToSet","onCurrencySelected","onValueChange","selectedTokens","selectedTokenAddress","errorMessage","onClick","alt","disableUnlock","hideBottom","setDeadline","INPUT","recipientAddress","disabled","warning","loggedOut"],"mappings":"w+CAQA,IAAMA,EAAaC,IAAOC,IAAV,KACZ,qBAAGC,MAAkBC,oBACG,gBAAGD,EAAH,EAAGA,MAAH,OAAeE,YAAe,IAAMF,EAAMG,gBAGhD,qBAAGH,MAAkBI,mBAIrCC,EAAeP,IAAOC,IAAV,KAKI,gBAAGO,EAAH,EAAGA,MAAON,EAAV,EAAUA,MAAV,OAAuBM,EAAQN,EAAMO,UAAYP,EAAMQ,eAEvD,qBAAGR,MAAkBI,mBAGrCK,EAAiBX,IAAOC,IAAV,KAIdW,EAAWZ,IAAOC,IAAV,KACV,qBAAGC,MAAkBW,iBAEd,qBAAGX,MAAkBY,YAM1BC,EAAiBf,IAAOC,IAAV,KAQde,EAAWhB,IAAOC,IAAV,KACV,qBAAGC,MAAkBW,iBAKnBI,EAAQjB,IAAOkB,MAAV,KAMW,qBAAGhB,MAAkBI,mBAEhC,gBAAGE,EAAH,EAAGA,MAAON,EAAV,EAAUA,MAAV,OAAuBM,EAAQN,EAAMO,UAAYP,EAAMiB,aAKrD,qBAAGjB,MAAkBkB,mBAInB,SAASC,EAAT,GAAmG,IAAtEC,EAAqE,EAArEA,MAAqE,IAA9DC,oBAA8D,MAA/C,GAA+C,MAA3CC,gBAA2C,MAAhC,aAAgC,MAAtBC,eAAsB,MAAZ,aAAY,EACvGC,EAAMC,cAAND,EAEAE,EAAYC,cAAZD,QAHuG,EAKrFE,mBAASP,EAAaQ,QAAUR,EAAaQ,QAAU,IAL8B,mBAKxGb,EALwG,KAKjGc,EALiG,KAOzGC,EAAiBC,YAAYhB,EAAO,KAPqE,EASvFY,mBAAS,CAAEC,aAASI,EAAWC,UAAMD,IATkD,mBASxGE,EATwG,KASlGC,EATkG,OAUrFR,oBAAS,GAV4E,mBAUxGtB,EAVwG,KAUjG+B,EAViG,KA6F/G,OAhFAC,qBAAU,WACRhB,EAAS,CAAEO,QAASM,EAAKN,QAASK,KAAMC,EAAKD,SAC5C,CAACZ,EAAUa,EAAKN,QAASM,EAAKD,OACjCI,qBAAU,WACRf,EAAQjB,KACP,CAACiB,EAASjB,IAGbgC,qBAAU,WACR,IAAIC,GAAQ,EAEZ,GAAIC,YAAUT,GACZ,IACEL,EACGe,cAAcV,GACdW,MAAK,SAAAR,GACCK,IAECL,EACFJ,EAASI,IAETE,EAAQ,CAAEP,QAASE,EAAgBG,KAAM,KACzCG,EAAS,WAIdM,OAAM,WACAJ,IACHH,EAAQ,CAAEP,QAASE,EAAgBG,KAAM,KACzCG,EAAS,UAGf,SACAD,EAAQ,CAAEP,QAASE,EAAgBG,KAAM,KACzCG,EAAS,WAGX,GAAuB,KAAnBN,EACF,IACEL,EACGkB,YAAYb,GACZW,MAAK,SAAAb,GACCU,IAECV,GACFO,EAAQ,CAAEP,QAASA,EAASK,KAAMH,IAClCM,EAAS,OAETA,GAAS,OAIdM,OAAM,WACAJ,GACHF,GAAS,MAGf,SACAA,GAAS,GAKf,OAAO,WACLE,GAAQ,KAET,CAACR,EAAgBL,EAASJ,EAAUC,IAerC,kBAAC1B,EAAD,KACE,kBAACQ,EAAD,CAAcC,MAAiB,KAAVU,GAAgBV,GACnC,kBAACG,EAAD,KACE,kBAACC,EAAD,KACE,kBAACG,EAAD,KACE,8BAAOO,GAASI,EAAE,uBAGtB,kBAACV,EAAD,KACE,kBAACC,EAAD,CACE8B,KAAK,OACLC,aAAa,MACbC,YAAY,MACZC,eAAe,MACfC,WAAW,QACXC,YAAY,YACZ5C,MAAiB,KAAVU,GAAgBV,EACvBgB,SA9BZ,SAAiB6B,QACMlB,IAAjBE,EAAKN,cAAuCI,IAAdE,EAAKD,MACrCE,EAAQ,CAAEP,aAASI,EAAWC,UAAMD,SAExBA,IAAV3B,GACF+B,IAEF,IAAMrB,EAAQmC,EAAMC,OAAOC,MACrBC,EAAmBd,YAAUxB,GACnCc,EAASwB,GAAoBtC,IAsBnBqC,MAAOrC,U,skCC5JrB,IAeMuC,EAAaC,SAAOC,MAAMC,aAAa,KAGvCC,EAAsB7D,IAAOC,IAAV,KACrB,qBAAGC,MAAkBW,iBAMnBiD,EAAY9D,aADO,SAAC,GAAD,EAAG+D,UAAH,EAAcC,OAAd,IAAyBC,EAAzB,6CAAoC,kBAAC,IAAcA,KAC1DjE,CAAH,KACJ,gBAAGE,EAAH,EAAGA,MAAH,SAAU8D,OAAuB9D,EAAMiB,UAAYjB,EAAMgE,eAKxD,qBAAGH,WAA6B,aAGtCI,EAAsBnE,IAAOC,IAAV,KACrB,qBAAGC,MAAkBW,iBAEd,qBAAGX,MAAkBY,YAK1BsD,EAAepE,IAAOqE,KAAV,KAGP,qBAAGnE,MAAkBY,YAG1BwD,EAAOtE,IAAOC,IAAV,KAqCV,SAASsE,EAAmCC,EAAaC,EAAcC,GACrE,IAAMC,EAAqBH,EAAYI,IAAIlB,SAAOC,MAAMC,aAAa,MAC/DiB,EAAYF,EAAmBC,IAAIF,GACnCI,EAAcL,EAAaG,IAAIlB,SAAOC,MAAMC,aAAa,MAAOmB,IAAIJ,GAC1E,OAAOE,EAAU5E,IAAI6E,GAIvB,SAASE,EAAmCC,EAAcR,EAAcC,GACtE,IAAMG,EAAYJ,EAAaG,IAAIK,GAAcL,IAAIlB,SAAOC,MAAMC,aAAa,MACzEkB,EAAcJ,EAAcQ,IAAID,GAAcL,IAAIlB,SAAOC,MAAMC,aAAa,MAClF,OAAOiB,EAAU5E,IAAI6E,GAAaC,IAAIrB,SAAOyB,UAAUC,KAGzD,SAASC,EAAoBC,GAC3B,MAAO,CACLC,iBAAkBD,EAAME,eAAiBF,EAAMG,eAAiBH,EAAMG,eAAiB,GACvFC,eAAgB,GAChBC,iBAA0C,WAAxBL,EAAME,cAtGb,EADD,EAwGVI,cAAeN,EAAMO,iBAAmBP,EAAMO,iBAAmB,MACjEC,eAAgBR,EAAMS,kBACU,QAA5BT,EAAMS,kBACJT,EAAMO,kBAA+C,QAA3BP,EAAMO,iBAC9B,MACA,GACFP,EAAMS,kBACRT,EAAMU,gBACJV,EAAMU,gBACN,IAIV,SAASC,EAAiBX,EAAOY,GAC/B,OAAQA,EAAOnD,MACb,IAAK,mBAAqB,IAChB4C,EAAoDL,EAApDK,iBAAkBC,EAAkCN,EAAlCM,cAAeE,EAAmBR,EAAnBQ,eACzC,OAAO,eACFR,EADL,CAEEI,eAAgB,GAChBC,iBA5HM,IA4HYA,EA3HX,EADD,EA6HNC,cAAeE,EACfA,eAAgBF,IAGpB,IAAK,kBAAoB,IACfA,EAAkCN,EAAlCM,cAAeE,EAAmBR,EAAnBQ,eADD,EAEMI,EAAOC,QAA3BC,EAFc,EAEdA,MAAOC,EAFO,EAEPA,SAETC,EArIE,IAqIiBF,EAAkBC,EAAWT,EAChDW,EArIG,IAqIiBH,EAAmBC,EAAWP,EAExD,OAAIQ,IAAqBC,EAChB,eACFjB,EADL,CAEEM,cA3II,IA2IWQ,EAAkBC,EAAW,GAC5CP,eA3IK,IA2IWM,EAAmBC,EAAW,KAGzC,eACFf,EADL,CAEEM,cAAeU,EACfR,eAAgBS,IAItB,IAAK,qBAAuB,IAAD,EACAL,EAAOC,QAAxBC,EADiB,EACjBA,MAAO7C,EADU,EACVA,MACPmC,EAAqCJ,EAArCI,eAAgBH,EAAqBD,EAArBC,iBACxB,OAAO,eACFD,EADL,CAEEC,iBAAkBhC,EAClBmC,eAAgBnC,IAAUgC,EAAmBG,EAAiB,GAC9DC,iBAAkBS,IAGtB,IAAK,mBACH,OAAO,eACFd,EADL,CAEEI,eAAgBQ,EAAOC,UAG3B,QACE,OAAOd,KAKb,SAASmB,EAAgBC,EAAYC,EAAeC,EAAaC,GAAiC,IAAjBC,EAAgB,wDAC/F,IACE,GACEJ,IACCC,GAAmC,IAAlBA,IAClBC,IACCC,GAAqC,IAAnBA,GACnB,CACA,IAAME,EAASpD,SAAOC,MAAMC,aAAa,IAAImD,IAAIrD,SAAOC,MAAMC,aAAa,KAE3E,OAAIiD,EACKJ,EACJ7B,IAAIkC,GACJlC,IAAIlB,SAAOC,MAAMC,aAAa,IAAImD,IAAIrD,SAAOC,MAAMC,aAAagD,KAChE3G,IAAIyD,SAAOC,MAAMC,aAAa,IAAImD,IAAIrD,SAAOC,MAAMC,aAAa8C,KAChEzG,IAAI0G,GAEAA,EACJ/B,IAAIkC,GACJlC,IAAIlB,SAAOC,MAAMC,aAAa,IAAImD,IAAIrD,SAAOC,MAAMC,aAAa8C,KAChEzG,IAAIyD,SAAOC,MAAMC,aAAa,IAAImD,IAAIrD,SAAOC,MAAMC,aAAagD,KAChE3G,IAAIwG,IAGX,WA2BW,SAASO,EAAT,GAAkF,IAA1DhB,EAAyD,EAAzDA,gBAAyD,IAAxCiB,eAAwC,SAAvBC,EAAuB,EAAvBA,OAC/DxF,GADsF,EAAfyF,IACjExF,cAAND,GADsF,EAEjDG,cAArCuF,EAFsF,EAEtFA,QAASC,EAF6E,EAE7EA,QAASzF,EAFoE,EAEpEA,QAASpB,EAF2D,EAE3DA,MAE7B8G,EAAiB,GACnBJ,EAAOtB,gBACT0B,EAAeJ,EAAOtB,gBAAiB,GAErCsB,EAAOpB,iBACTwB,EAAeJ,EAAOpB,iBAAkB,GAEtCpD,YAAUsD,KACZsB,EAAetB,IAAmB,GAGpC,IAAMuB,EAAiBC,cAGjBC,EAAkB,WAAmB,wDAAC,IACtCC,EAAWC,OAAOC,SAASV,EAAOQ,UACtC,OAAKG,MAAMH,KAA2B,IAAbA,GAAkBA,GAAY,GAC9CA,EA3O0B,IAsNyD,EAmC5C5F,qBAnC4C,mBAmCzFgG,EAnCyF,KAmCrEC,EAnCqE,OAqChDjG,mBAxPd,KAmN8D,oBAqCvFkG,GArCuF,MAqCtEC,GArCsE,SAuCxDnG,oBAAS,kBAAM2F,OAvCyC,qBAuCvFS,GAvCuF,MAuC1EC,GAvC0E,SAwC9CrG,oBAAS,kBAAM2F,GAAgB,MAxCe,qBAwCvFW,GAxCuF,MAwCrEC,GAxCqE,MA0CxFC,GAAqB5E,SAAOC,MAAMC,aAAasE,IAC/CK,GAA0B7E,SAAOC,MAAMC,aAAawE,IAG1D5F,qBAAU,WACRgG,IAAQC,SAASC,OAAOC,SAASC,SAAWF,OAAOC,SAASE,UAC3D,IAhD2F,OAmDvDC,qBACrC7C,EACA,CACED,gBAAiBA,EACjBH,iBAAkBqB,EAAOtB,cACzBG,kBAAmBmB,EAAOpB,eAC1BN,cAAe0B,EAAO6B,WACtBtD,eAAgByB,EAAO8B,aAEzB3D,GA5D4F,qBAmDvF4D,GAnDuF,MAmD5EC,GAnD4E,MA+DtF3D,GAAsF0D,GAAtF1D,iBAAkBG,GAAoEuD,GAApEvD,eAAgBC,GAAoDsD,GAApDtD,iBAAkBC,GAAkCqD,GAAlCrD,cAAeE,GAAmBmD,GAAnBnD,eAC3EtD,qBAAU,WACRuF,GAAsB,GACtB,IAAK,IAAIoB,EAAI,EAAGA,EAAIC,IAAaC,OAAQF,IAErCC,IAAaD,GAAGG,gBAAkBxD,GAAewD,eACjDF,IAAaD,GAAGG,gBAAkB1D,GAAc0D,eAEhDvB,GAAsB,KAGzB,CAACjC,GAAgBF,KA1E0E,OA4E5D9D,mBAAS,CACzCC,QAhDIkF,GAAWC,EAAOqC,UACbrC,EAAOqC,UAET,GA8CPnH,KAAM,KA9EsF,qBA4EvFmH,GA5EuF,MA4E5EC,GA5E4E,SAgFlD1H,qBAhFkD,qBAgFvF2H,GAhFuF,MAgFvEC,GAhFuE,MAmFxFC,GA1OR,SAAqB/D,EAAeE,GAClC,OAAKF,GAAkBE,EAEM,QAAlBF,EAxEQ,EA0EW,QAAnBE,EAzEQ,EACE,EAqEZ,KAwOQ8D,CAAYhE,GAAeE,IAnFkD,GAsFE+D,YAC9FjE,IADckE,GAtF8E,GAsFtFC,OAA+BrD,GAtFuD,GAsFjEsD,SAA0CC,GAtFuB,GAsFxCC,gBAtFwC,GAyFKL,YACjG/D,IADcqE,GAzF8E,GAyFtFJ,OAAgCnD,GAzFsD,GAyFhEoD,SAA2CI,GAzFqB,GAyFtCF,gBAInC,SAAhBJ,IAA6C,SAAjBK,KAC/BrC,GAAqB,GAGvB,IAAMuC,GAAwBC,YAAoBL,IAC5CM,GAAyBD,YAAoBF,IAE7CI,GAAiBC,YAAkB,8CACnCC,GAjUa,IAiUFf,GAA4BY,GAAyBF,GAChEM,GAAcC,YAAehF,IAI7BiF,GAAiBC,YAAoB1D,EAASxB,GAAeqE,IA1G2B,GA6GrBc,YAAoBnF,IAAzEoF,GA7G0E,GA6GtFC,WAA2CC,GA7G2C,GA6GzDC,aA7GyD,GA8GnBJ,YAAoBjF,IAA3EsF,GA9G0E,GA8GtFH,WAA4CI,GA9G0C,GA8GxDF,aAGhCG,GAAeC,YAAkBnE,EAASxB,IAC1C4F,GAAgBD,YAAkBnE,EAAStB,IAC3C2F,GAA2BH,IAAgB3D,OAAO+D,UAAUhF,IAC9DiF,YAAgBL,GAAc5E,GAAekF,KAAKC,IAAI,EAAGnF,KACzD,GACEoF,GAA4BN,IAAiB7D,OAAO+D,UAAU9E,IAChE+E,YAAgBH,GAAe5E,GAAgBgF,KAAKC,IAAI,EAAGjF,KAC3D,GAGEmF,GA1VM,IA0VgBpG,GAA6Be,GAAgBE,GACnEoF,GA1VO,IA0VarG,GAA8Be,GAAgBE,GA5HsB,GA+HlC9E,qBA/HkC,qBA+HvFmK,GA/HuF,MA+H/DC,GA/H+D,MAgIxFC,GAA6BzG,KAAmBsG,IAA2C,IAAtBA,IACvEL,YAAgBjG,GAAgBsG,GAAmBJ,KAAKC,IAAI,EAAGG,KAAoB,GACnF,GACEI,GAlWM,IAkWazG,GAA6BsG,GAAyBvG,GACzE2G,GAnWM,IAmWgB1G,GAA6BJ,GAAmB4G,GACtEG,GAnWO,IAmWa3G,GAA8BsG,GAAyBvG,GAC3E6G,GApWO,IAoWgB5G,GAA8BJ,GAAmB4G,GAtIgB,GA0I9CrK,qBA1I8C,qBA0IvF0K,GA1IuF,MA0IrEC,GA1IqE,MA2I9FjK,qBAAU,WACR,GAAI+C,KAAqBwG,IAA+C,IAAxBA,IAA4B,CAC1E,IACE,IAAMW,EAAchJ,SAAOC,MAAMgJ,WAAWpH,GAAkBwG,IAE9D,GAAIW,EAAYE,IAAIlJ,SAAOyB,UAAU0H,OAASH,EAAYI,IAAIpJ,SAAOyB,UAAU4H,YAC7E,MAAMC,QAENd,GAA0BQ,GAC1BD,GAAoB,MAEtB,SACAA,GAAoB/K,EAAE,kBAGxB,OAAO,WACLwK,KACAO,SAGH,CAAClH,GAAkBwG,GAAqBrK,IA/JmD,OArKhG,SAAiC6B,GAA8D,IAAvD0J,EAAsD,wDAAvCC,EAAuC,uCAAjBC,EAAiB,uCAC5F,GAAI5J,EAAO,CACT,IAAM6J,EAAS7J,EAAMqB,IAAIqI,EAAQC,EAAuBC,GAAiBlN,IAAIyD,SAAOC,MAAMC,aAAa,MACjGyJ,EAAU9J,EAAM2B,IAAIkI,GACpBE,EAAU/J,EAAMwB,IAAIqI,GAC1B,MAAO,CACLC,QAASA,EAAQE,GAAG7J,SAAOyB,UAAU0H,MAAQnJ,SAAOyB,UAAU0H,KAAOQ,EACrEC,QAASA,EAAQE,GAAG9J,SAAOyB,UAAU4H,YAAcrJ,SAAOyB,UAAU4H,WAAaO,GAGnF,MAAO,GA6TkEG,CACzE/H,GA7XmB,IA8XnBiE,GACApB,GACAD,IAJeoF,GAlK6E,GAkKtFL,QAAyCM,GAlK6C,GAkKtDL,QAlKsD,GA0K1DxL,qBA1K0D,qBA0KvF8L,GA1KuF,MA0K3EC,GA1K2E,SA2K1D/L,oBAAS,GA3KiD,qBA2KvFgM,GA3KuF,MA2K3EC,GA3K2E,MA4K9FvL,qBAAU,WACR,IAAMwL,EA5YI,IA4YoBrI,GAA6BsG,GAAyB0B,GACpF,GAAIrC,KAAiBT,IAAoC,QAAlBjF,KAA4BoI,EAUjE,OATI1C,GAAaiC,GAAGS,GAClBH,GAAcnM,EAAE,wBACW,QAAlBkE,IAA2BiF,GAAe0C,GAAGS,IACtDH,GAAcnM,EAAE,oBAChBqM,IAAc,KAEdF,GAAc,MACdE,IAAc,IAET,WACLF,KACAE,IAAc,MAGjB,CAACpI,GAAkBsG,GAAwB0B,GAAuBrC,GAAc1F,GAAeiF,GAAgBnJ,IAGlHc,qBAAU,WACR,IAAMyL,EAAShC,GAEf,GA/ZiB,IA+ZbtC,GAA2B,CAC7B,IAAMsB,EAAaG,GACbD,EAAeE,GAErB,GAAI4C,GAAUhD,GAAcE,EAAc,CACxC,IACE,IAAM+C,EAxaF,IAyaFvI,GACIpB,EAAmC0J,EAAQhD,EAAYE,GACvDnG,EAAmCiJ,EAAQhD,EAAYE,GAE7D,GAAI+C,EAAyBtB,IAAIlJ,SAAOyB,UAAU0H,MAChD,MAAMG,QAGR9D,GAAkB,CAChBnG,KAAM,mBACNoD,QAAS+H,IAEX,SACAzB,GAAoB/K,EAAE,0BAExB,OAAO,WACLwH,GAAkB,CAAEnG,KAAM,mBAAoBoD,QAAS,YAGtD,GAxbU,IAwbNwD,GAA2B,CACpC,IAAMsB,EAAaD,GACbG,EAAeD,GAErB,GAAI+C,GAAUhD,GAAcE,EAAc,CACxC,IACE,IAAM+C,EAlcF,IAmcFvI,GACIpB,EAAmC0J,EAAQ9C,EAAcF,GACzDjG,EAAmCiJ,EAAQ9C,EAAcF,GAE/D,GAAIiD,EAAyBtB,IAAIlJ,SAAOyB,UAAU0H,MAChD,MAAMG,QAGR9D,GAAkB,CAChBnG,KAAM,mBACNoD,QAAS+H,IAEX,SACAzB,GAAoB/K,EAAE,0BAExB,OAAO,WACLwH,GAAkB,CAAEnG,KAAM,mBAAoBoD,QAAS,YAGtD,GAjdY,IAidRwD,GAA6B,CACtC,IAAMwE,EAAkBnD,GAClBoD,EAAoBlD,GAEpBmD,EAAmBjD,GACnBkD,EAAqBjD,GAE3B,GAAI4C,GAAUE,GAAmBC,GAAqBC,GAAoBC,EAAoB,CAC5F,IACE,GA/dI,IA+dA3I,GAA4B,CAC9B,IAAM4I,EAAoBhK,EAAmC0J,EAAQG,EAAmBD,GACxF,GAAoB,QAAhBhE,IAA0BoE,EAAkB3B,IAAIlJ,SAAOyB,UAAU0H,MACnE,MAAMG,QAER,IAAIkB,EAA2B3J,EAC7BgK,EACAF,EACAC,GAEF,GAAoB,QAAhBnE,IAA0B+D,EAAyBtB,IAAIlJ,SAAOyB,UAAU0H,MAC1E,MAAMG,QAER9D,GAAkB,CAChBnG,KAAM,mBACNoD,QAAS+H,QAEN,CACL,IAAMK,EAAoBvJ,EAAmCiJ,EAAQI,EAAkBC,GACvF,GAAoB,QAAhBnE,IAA0BoE,EAAkB3B,IAAIlJ,SAAOyB,UAAU0H,MACnE,MAAMG,QAEJkB,EAA2BlJ,EAC7BuJ,EACAH,EACAD,GAEF,GAAoB,QAAhBhE,IAA0B+D,EAAyBtB,IAAIlJ,SAAOyB,UAAU0H,MAC1E,MAAMG,QAER9D,GAAkB,CAChBnG,KAAM,mBACNoD,QAAS+H,KAGb,SACAzB,GAAoB/K,EAAE,0BAExB,OAAO,WACLwH,GAAkB,CAAEnG,KAAM,mBAAoBoD,QAAS,UAI5D,CACD8F,GACAtC,GACAyB,GACAC,GACAL,GACAE,GACAvF,GACAjE,IAGFc,qBAAU,WACQgM,cACRC,KAAK/F,OAAOC,SAASC,SAAW,MACvC,IAzT2F,OA2T9D9G,oBAAS,GA3TqD,qBA2TvF4M,GA3TuF,MA2T7EC,GA3T6E,MA4TxFC,GAAepI,EAAgB4F,GAAkB1F,GAAe4F,GAAmB1F,IACnFiI,GAAuBrI,EAAgB4F,GAAkB1F,GAAe4F,GAAmB1F,IAAgB,GAC7F,SAAhBkD,IAA2C,SAAjBK,IACxBlD,IACFa,GAAqB,IAIL,QAAfgC,IAAyC,OAAhBK,IAA0C,OAAfL,IAAwC,QAAhBK,MAC/ErC,GAAqB,GAEvB,IAAMgH,GA/VR,SACEnF,EACAqB,EACAE,EACAxE,EACA0E,EACAC,EACAzE,GAEC,IADDC,EACA,wDACA,GA9MmB,IA8Mf8C,EACF,OAAOnD,EAAgB4E,EAAkB,GAAIC,EAAoBzE,EAAgBC,GAC5E,GA/MY,IA+MR8C,EACT,OAAOnD,EAAgB0E,EAAmBxE,EAAesE,EAAiB,GAAInE,GACzE,GAhNc,IAgNV8C,EAA6B,CACtC,IAAM7C,EAASpD,SAAOC,MAAMC,aAAa,IAAImD,IAAIrD,SAAOC,MAAMC,aAAa,KACrEmL,EAAYvI,EAAgB0E,EAAmBxE,EAAesE,EAAiB,IAC/EgE,EAAaxI,EAAgB4E,EAAkB,GAAIC,EAAoBzE,GAC7E,IACE,OAAUmI,GAAaC,EAAcD,EAAUnK,IAAIoK,GAAY/O,IAAI6G,QAAU3E,EAC7E,YA2Ue8M,CACjBtF,GACAqB,GACAE,GACAxE,GACA0E,GACAC,GACAzE,IAGIsI,GACJN,IAAgBE,KAAeA,GAAWK,SACtCP,GACC1J,IAAI4J,IACJM,MACAxK,IAAIlB,SAAOC,MAAMC,aAAa,IAAImD,IAAIrD,SAAOC,MAAMC,aAAa,MAChE3D,IAAI6O,IACJ5J,IAAIxB,SAAOC,MAAMC,aAAa,GAAGgB,IAAIlB,SAAOC,MAAMC,aAAa,IAAImD,IAAIrD,SAAOC,MAAMC,aAAa,YAClGzB,EACAkN,GAA2BH,IAAmBvD,YAAgBuD,GAAiB,GAAI,GACnFI,GACJJ,IACAA,GAAgBpC,IAAIpJ,SAAOC,MAAM4L,WAAW,SAC5CL,GAAgB3B,GAAG7J,SAAOC,MAAM4L,WAAW,OACvCC,GAAsBN,IAAmBA,GAAgBpC,IAAIpJ,SAAOC,MAAM4L,WAAW,OAMrFE,GAAUxI,EACZ2H,IAA+B,OAAfhB,IAA4C,OAArBpB,IAAgD,OAAnB/C,IAA2BzB,GAC/F4G,IAA+B,OAAfhB,IAA4C,OAArBpB,IAA6BxE,GAElE0H,GAAa,WAAOhO,EAAE,aAAT,KACnB,SAASiO,GAAcpM,GACrB,MAAM,YAAN,OAAmBA,GA3WyE,8CA+W9F,kDAAAqM,EAAA,yDAlkBgC,MAokB1B5H,IACFQ,IAAQnF,MAAM,CACZwM,SAAU,uBACV3J,OAAQ,sBACR3C,MAAOyE,GAAkB,KAIvB8H,EAAWlE,KAAKmE,KAAKC,KAAKC,MAAQ,KAAQjI,GAnlB7B,IAslBf2B,GAllB+B,KAmlB7B/B,SAASW,GAAwB2H,aACnC1H,IAAQnF,MAAM,CACZwM,SAAU,uBACV3J,OAAQ,sBACR3C,MAAOqE,SAASW,GAAwB2H,cAxlBjB,KA4lBvBtI,SAASU,GAAmB4H,aAC9B1H,IAAQnF,MAAM,CACZwM,SAAU,uBACV3J,OAAQ,sBACR3C,MAAOqE,SAASU,GAAmB4H,cAOrCC,EAAmB,EACD,QAAlBvK,KACFuK,EAAmBjF,IAAqBF,GAAkBA,GAAkBE,GAAoB,MAE9FkF,EAAqBD,EAAmB9D,GAGxCnG,EAAS,GACTmK,EAAQ,GACQ,QAAhBlG,IAAyC,OAAfL,IAAyB7C,EA1CzD,wBA4CIqJ,EAAW3F,GAAY2F,SAASC,QAChCC,EAAS7F,GAAY4F,QACrBE,EAAO,CAAC3K,GAAgBmG,IACxB1I,EAAQG,SAAOyB,UAAU0H,KA/C7B,UAiDoCyD,EAAQ,WAAR,cAAYG,GAAZ,QAAkB,CAAElN,YAjDxD,QAiDUmN,EAjDV,OAkDIF,EAAM,WAAN,cAAUC,GAAV,QAAgB,CACdlN,QACAoN,SAAUC,YAAmBF,EAAmBjN,OAC/Cb,MAAK,SAAAiO,GACNtJ,EAAesJ,MAGjBP,EAAW9F,GAAe8F,SAASQ,KACnCN,EAAShG,GAAesG,KACxBL,EAAO,CAACxE,IACR1I,EAAQG,SAAOyB,UAAU0H,KA5D7B,2BA6D6B,OAAhB1C,IAAwC,QAAfL,IAA0B7C,EA7DhE,kCA+DyB8J,YAAmB3J,EAASxB,GAAehE,GA/DpE,QA+DQoP,EA/DR,OAgEwBA,EAAS,GAAGd,WACZjE,KAClBnE,GAAqB,GAEvBwI,EAAW9F,GAAe8F,SAASW,OACnCT,EAAShG,GAAeyG,OACxBR,EAAO,CAACxE,IACR1I,EAAQG,SAAOyB,UAAU0H,KAvE7B,wBA9kBY,IAwpBJlH,IAEFO,EAASe,EAAU,YAAc,YACjCoJ,EAAQvK,GAxpBK,IAypBT6D,IACF2G,EAAWrJ,EAAUyD,GAAS4F,SAASY,wBAA0BxG,GAAS4F,SAASa,oBACnFX,EAASvJ,EAAUyD,GAASwG,wBAA0BxG,GAASyG,oBAC/DV,EAAOxJ,EAAU,CAACyG,GAAuBoC,EAAUvG,GAAUxH,SAAW,CAAC2L,GAAuBoC,GAChGvM,EAAQ0I,IA5pBG,IA6pBFtC,IACT2G,EAAWrJ,EAAUyD,GAAS4F,SAASc,wBAA0B1G,GAAS4F,SAASe,oBACnFb,EAASvJ,EAAUyD,GAAS0G,wBAA0B1G,GAAS2G,oBAC/DZ,EAAOxJ,EACH,CAACgF,GAAwByB,GAAuBoC,EAAUvG,GAAUxH,SACpE,CAACkK,GAAwByB,GAAuBoC,GACpDvM,EAAQG,SAAOyB,UAAU0H,MAlqBZ,IAmqBJlD,KACT2G,EAAWrJ,EAAUyD,GAAS4F,SAASgB,0BAA4B5G,GAAS4F,SAASiB,sBACrFf,EAASvJ,EAAUyD,GAAS4G,0BAA4B5G,GAAS6G,sBACjEd,EAAOxJ,EACH,CACAgF,GACAyB,GACAhK,SAAOyB,UAAUC,IACjB0K,EACAvG,GAAUxH,QACV+D,IAEA,CAACmG,GAAwByB,GAAuBhK,SAAOyB,UAAUC,IAAK0K,EAAUhK,IACpFvC,EAAQG,SAAOyB,UAAU0H,OAprBpB,IAsrBElH,KAETO,EAASe,EAAU,aAAe,aAClCoJ,EAAQvK,GAvrBK,IAyrBT6D,IACF2G,EAAWrJ,EAAUyD,GAAS4F,SAASkB,yBAA2B9G,GAAS4F,SAASmB,qBACpFjB,EAASvJ,EAAUyD,GAAS8G,yBAA2B9G,GAAS+G,qBAChEhB,EAAOxJ,EAAU,CAACgF,GAAwB6D,EAAUvG,GAAUxH,SAAW,CAACkK,GAAwB6D,GAClGvM,EAAQoK,IA5rBG,IA6rBFhE,IACT2G,EAAWrJ,EAAUyD,GAAS4F,SAASoB,yBAA2BhH,GAAS4F,SAASqB,qBACpFnB,EAASvJ,EAAUyD,GAASgH,yBAA2BhH,GAASiH,qBAChElB,EAAOxJ,EACH,CAACgF,GAAwB0B,GAAuBmC,EAAUvG,GAAUxH,SACpE,CAACkK,GAAwB0B,GAAuBmC,GACpDvM,EAAQG,SAAOyB,UAAU0H,MAlsBZ,IAmsBJlD,KACT2G,EAAWrJ,EAAUyD,GAAS4F,SAASsB,2BAA6BlH,GAAS4F,SAASuB,uBACtFrB,EAASvJ,EAAUyD,GAASkH,2BAA6BlH,GAASmH,uBAClEpB,EAAOxJ,EACH,CACAgF,GACA0B,GACAjK,SAAOyB,UAAU4H,WACjB+C,EACAvG,GAAUxH,QACV+D,IAEA,CAACmG,GAAwB0B,GAAuBjK,SAAOyB,UAAU4H,WAAY+C,EAAUhK,IAC3FvC,EAAQG,SAAOyB,UAAU0H,OAvIjC,yBA2IkCyD,EAAQ,WAAR,cAAYG,GAAZ,QAAkB,CAAElN,YA3ItD,QA2IQmN,EA3IR,OA4IEF,EAAM,WAAN,cAAUC,GAAV,QAAgB,CACdlN,QACAoN,SAAUC,YAAmBF,EAAmBjN,OAC/Cb,MAAK,SAAAiO,GACNtJ,EAAesJ,GACfrI,IAAQnF,MAAM,CACZwM,SAAU,cACV3J,OAAQA,EACRmK,MAAOA,EACP9M,MAAO6M,EACP0B,WAAYjB,EAASkB,OAEvBvJ,IAAQnF,MAAM,CACZwM,SAAU,OACV3J,OAAQ2K,EAASkB,KACjB1B,MAAOD,EAAmBF,gBA3JhC,6CA/W8F,6BAghBxCpO,mBAAS,IAhhB+B,qBAghBvFkQ,GAhhBuF,MAghBlEC,GAhhBkE,MAkhBxFC,GAAoBC,cAEpBC,GACc,QAAlBxM,IAA2BA,KAAkByM,IAAuBhL,GAASiL,eAAe1M,IAExF2M,GACe,QAAnBzM,IAA4BA,KAAmBuM,IAAuBhL,GAASiL,eAAexM,IAxhBF,GA0hB9ChE,oBAAS,GA1hBqC,qBA0hBvF0Q,GA1hBuF,MA0hBrEC,GA1hBqE,SA2hB5C3Q,oBAAS,GA3hBmC,qBA2hBvF4Q,GA3hBuF,MA2hBpEC,GA3hBoE,MA+iB9F,OAhBAnQ,qBAAU,WAENiQ,KADEL,MAKH,CAACA,GAAkBK,KAEtBjQ,qBAAU,WAENmQ,KADEJ,MAKH,CAACA,GAAmBI,KAGrB,oCACGH,IACC,kBAAC,IAAD,CACEI,UAAW,WACTH,IAAoB,IAEtBnL,eAAgBA,EAChBjB,SAAUT,KAGb8M,IACC,kBAAC,IAAD,CACEE,UAAW,WACTD,IAAqB,IAEvBrL,eAAgBA,EAChBjB,SAAUP,KAGd,kBAAC,IAAD,CACExE,MAAOI,EAAE,SACT4F,eAAgBA,EAChBuL,YAAaxG,IApyBN,IAoyB6B1G,GAA8B+J,GAAgB,GAClFoD,UAAWrH,IAAyBkE,GAAclE,IAClDsH,qBAAsB,WACpB,GAAIzH,IAAgB5E,GAAe,CACjC,IAAMsM,EAA+B,QAAlBpN,GAA0B0F,GAAapG,IAAIxB,SAAOC,MAAM4L,WAAW,OAASjE,GAC3F0H,EAAWxF,GAAG9J,SAAOyB,UAAU0H,OACjC3D,GAAkB,CAChBnG,KAAM,qBACNoD,QAAS,CACP5C,MAAOoI,YAAgBqH,EAAYtM,GAAeA,IAAe,GACjEN,MA/yBJ,OAqzBN6M,mBAAoB,SAAArN,GAClBsD,GAAkB,CAChBnG,KAAM,kBACNoD,QAAS,CAAEE,SAAUT,EAAeQ,MAxzBlC,MA2zBN8M,cAAe,SAAAzM,GACbyC,GAAkB,CAChBnG,KAAM,qBACNoD,QAAS,CAAE5C,MAAOkD,EAAYL,MA9zB5B,MAi0BN0H,WAAYA,GACZqF,eAAgB,CAACvN,GAAeE,IAChCsN,qBAAsBxN,GACtBrC,MAAO8I,GACPgH,aAAczF,KAr0BR,IAq0BkCjI,GAA6B6G,GAAmB,MAE1F,kBAAC,IAAD,KACE,kBAAC3I,EAAD,KACE,kBAACC,EAAD,CACEwP,QAAS,WACPpK,GAAkB,CAAEnG,KAAM,sBAE5BgB,WAAS,EACTwP,IAAI,OACJvP,OAAQyL,OAId,kBAAC,IAAD,CACEnO,MAAOI,EAAE,UACTmR,YAAatG,IAr1BP,IAq1B+B5G,GAA6B+J,GAAgB,GAClFoD,UAAWhH,IAA0B6D,GAAc7D,IACnDxE,eAAgBA,EAChB2L,mBAAoB,SAAAnN,GAClBoD,GAAkB,CAChBnG,KAAM,kBACNoD,QAAS,CAAEE,SAAUP,EAAgBM,MA11BlC,MA61BP8M,cAAe,SAAAvM,GACbuC,GAAkB,CAChBnG,KAAM,qBACNoD,QAAS,CAAE5C,MAAOoD,EAAaP,MAh2B5B,MAm2BP+M,eAAgB,CAACvN,GAAeE,IAChCsN,qBAAsBtN,GACtBvC,MAAOgJ,GACP8G,aAt2BO,IAs2BO1N,GAA8B6G,GAAmB,GAC/DgH,eAAa,IAEdvM,EACC,oCACE,kBAAC,IAAD,KACE,kBAACpD,EAAD,KACE,kBAACC,EAAD,CAAWE,OAAQyL,GAAS8D,IAAI,YAGpC,kBAAC,IAAD,CAAmB/R,SAAUgI,GAAc/H,QAASiI,GAAmBnI,aAAcgI,MAGrF,GAEJ,kBAAC,IAAD,CAAgBkK,YAAU,GACxB,kBAACtP,EAAD,CACEmP,QAAS,WACP3E,IAAY,SAAAD,GAAQ,OAAKA,OAG3B,kBAACtK,EAAD,KAAe1C,EAAE,iBAChBgN,GACC,8BACGE,GAAY,YACJ9E,GADI,cACa6B,YAAgBiD,GAAc,GAAI,GAAG,GADlD,YAC4DzE,IACrE,OAGJ,8BACGyE,GAAY,YACJzE,GADI,cACcwB,YAAgBkD,GAAsB,GAAI,GAAG,GAD3D,YACqE/E,IAC9E,SAKd,kBAAC,IAAD,CACE1C,QAASA,EACTe,eAAgBA,GAChBE,oBAAqBA,GACrBH,YAAaA,GACboH,gBAAiBA,GACjBE,oBAAqBA,GACrB1H,mBAAoBA,EACpB4L,YAAazL,GACb6H,SAAU9H,GACV4F,WAAYA,GACZpB,iBAAkBA,GAClB5G,cAAeA,GACfE,eAAgBA,GAChBP,iBAAkBA,GAClB0G,uBAAwBA,GACxBtG,iBAAkBA,GAClBgO,MA75BM,EA85BNvH,iBAAkBA,GAClBE,kBAAmBA,GACnBxC,YAAaA,GACbK,aAAcA,GACduD,sBAAuBA,GACvBC,sBAAuBA,GACvB3B,kBAAmBA,GACnBD,oBAAqBA,GACrBsD,yBAA0BA,GAC1B4C,uBAAwBA,GACxB2B,iBAAkBrK,GAAUxH,QAC5BkF,QAASA,IAEX,kBAAC3C,EAAD,KACE,kBAAC,IAAD,CACEuP,WACE/L,MAA6BV,IAAY5G,MAAiBiP,IAAmC,YAAxBuC,IAEvEsB,QAASlM,IAAY5G,EAjtBiE,4CAitBhD0R,GACtC4B,QAAStE,IAA+C,YAAxBwC,GAChC+B,WAAY3M,GAEXU,EACG,OAKMpG,EAJL0F,EAECH,EACEuI,IAA+C,YAAxBwC,GACnB,aACA,OACJxC,IAA+C,YAAxBwC,GACnB,aACA,OAPJ","file":"static/js/2.12e4bfc6.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useTranslation } from 'react-i18next'\r\nimport { transparentize } from 'polished'\r\n\r\nimport { isAddress } from '../../utils'\r\nimport { useWeb3React, useDebounce } from '../../hooks'\r\n\r\nconst InputPanel = styled.div`\r\n  ${({ theme }) => theme.flexColumnNoWrap}\r\n  box-shadow: 0 4px 8px 0 ${({ theme }) => transparentize(0.95, theme.shadowColor)};\r\n  position: relative;\r\n  border-radius: 1.25rem;\r\n  background-color: ${({ theme }) => theme.inputBackground};\r\n  z-index: 1;\r\n`\r\n\r\nconst ContainerRow = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  border-radius: 1.25rem;\r\n  border: 1px solid ${({ error, theme }) => (error ? theme.salmonRed : theme.mercuryGray)};\r\n\r\n  background-color: ${({ theme }) => theme.inputBackground};\r\n`\r\n\r\nconst InputContainer = styled.div`\r\n  flex: 1;\r\n`\r\n\r\nconst LabelRow = styled.div`\r\n  ${({ theme }) => theme.flexRowNoWrap}\r\n  align-items: center;\r\n  color: ${({ theme }) => theme.doveGray};\r\n  font-size: 0.75rem;\r\n  line-height: 1rem;\r\n  padding: 0.75rem 1rem;\r\n`\r\n\r\nconst LabelContainer = styled.div`\r\n  flex: 1 1 auto;\r\n  width: 0;\r\n  overflow: hidden;\r\n  white-space: nowrap;\r\n  text-overflow: ellipsis;\r\n`\r\n\r\nconst InputRow = styled.div`\r\n  ${({ theme }) => theme.flexRowNoWrap}\r\n  align-items: center;\r\n  padding: 0.25rem 0.85rem 0.75rem;\r\n`\r\n\r\nconst Input = styled.input`\r\n  font-size: 1rem;\r\n  outline: none;\r\n  border: none;\r\n  flex: 1 1 auto;\r\n  width: 0;\r\n  background-color: ${({ theme }) => theme.inputBackground};\r\n\r\n  color: ${({ error, theme }) => (error ? theme.salmonRed : theme.royalBlue)};\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n\r\n  ::placeholder {\r\n    color: ${({ theme }) => theme.placeholderGray};\r\n  }\r\n`\r\n\r\nexport default function AddressInputPanel({ title, initialInput = '', onChange = () => {}, onError = () => {} }) {\r\n  const { t } = useTranslation()\r\n\r\n  const { library } = useWeb3React()\r\n\r\n  const [input, setInput] = useState(initialInput.address ? initialInput.address : '')\r\n\r\n  const debouncedInput = useDebounce(input, 150)\r\n\r\n  const [data, setData] = useState({ address: undefined, name: undefined })\r\n  const [error, setError] = useState(false)\r\n\r\n  // keep data and errors in sync\r\n  useEffect(() => {\r\n    onChange({ address: data.address, name: data.name })\r\n  }, [onChange, data.address, data.name])\r\n  useEffect(() => {\r\n    onError(error)\r\n  }, [onError, error])\r\n\r\n  // run parser on debounced input\r\n  useEffect(() => {\r\n    let stale = false\r\n\r\n    if (isAddress(debouncedInput)) {\r\n      try {\r\n        library\r\n          .lookupAddress(debouncedInput)\r\n          .then(name => {\r\n            if (!stale) {\r\n              // if an ENS name exists, set it as the destination\r\n              if (name) {\r\n                setInput(name)\r\n              } else {\r\n                setData({ address: debouncedInput, name: '' })\r\n                setError(null)\r\n              }\r\n            }\r\n          })\r\n          .catch(() => {\r\n            if (!stale) {\r\n              setData({ address: debouncedInput, name: '' })\r\n              setError(null)\r\n            }\r\n          })\r\n      } catch {\r\n        setData({ address: debouncedInput, name: '' })\r\n        setError(null)\r\n      }\r\n    } else {\r\n      if (debouncedInput !== '') {\r\n        try {\r\n          library\r\n            .resolveName(debouncedInput)\r\n            .then(address => {\r\n              if (!stale) {\r\n                // if the debounced input name resolves to an address\r\n                if (address) {\r\n                  setData({ address: address, name: debouncedInput })\r\n                  setError(null)\r\n                } else {\r\n                  setError(true)\r\n                }\r\n              }\r\n            })\r\n            .catch(() => {\r\n              if (!stale) {\r\n                setError(true)\r\n              }\r\n            })\r\n        } catch {\r\n          setError(true)\r\n        }\r\n      }\r\n    }\r\n\r\n    return () => {\r\n      stale = true\r\n    }\r\n  }, [debouncedInput, library, onChange, onError])\r\n\r\n  function onInput(event) {\r\n    if (data.address !== undefined || data.name !== undefined) {\r\n      setData({ address: undefined, name: undefined })\r\n    }\r\n    if (error !== undefined) {\r\n      setError()\r\n    }\r\n    const input = event.target.value\r\n    const checksummedInput = isAddress(input)\r\n    setInput(checksummedInput || input)\r\n  }\r\n\r\n  return (\r\n    <InputPanel>\r\n      <ContainerRow error={input !== '' && error}>\r\n        <InputContainer>\r\n          <LabelRow>\r\n            <LabelContainer>\r\n              <span>{title || t('recipientAddress')}</span>\r\n            </LabelContainer>\r\n          </LabelRow>\r\n          <InputRow>\r\n            <Input\r\n              type=\"text\"\r\n              autoComplete=\"off\"\r\n              autoCorrect=\"off\"\r\n              autoCapitalize=\"off\"\r\n              spellCheck=\"false\"\r\n              placeholder=\"0x1234...\"\r\n              error={input !== '' && error}\r\n              onChange={onInput}\r\n              value={input}\r\n            />\r\n          </InputRow>\r\n        </InputContainer>\r\n      </ContainerRow>\r\n    </InputPanel>\r\n  )\r\n}\r\n","import React, { useState, useReducer, useEffect } from 'react'\r\nimport ReactGA from 'react-ga'\r\nimport { createBrowserHistory } from 'history'\r\nimport { ethers } from 'ethers'\r\nimport styled from 'styled-components'\r\nimport { useTranslation } from 'react-i18next'\r\n\r\nimport { useWeb3React, useCTokenContract, useDAIContract } from '../../hooks'\r\nimport { brokenTokens } from '../../constants'\r\nimport { amountFormatter, calculateGasMargin, isAddress, getAccountSnapshot } from '../../utils'\r\n\r\nimport { useExchangeContract } from '../../hooks'\r\nimport { useTokenDetails, INITIAL_TOKENS_CONTEXT } from '../../contexts/Tokens'\r\nimport { useTransactionAdder } from '../../contexts/Transactions'\r\nimport { useAddressBalance, useExchangeReserves } from '../../contexts/Balances'\r\nimport { useAddressAllowance } from '../../contexts/Allowances'\r\nimport { useWalletModalToggle } from '../../contexts/Application'\r\n\r\nimport { Button } from '../../theme'\r\nimport CurrencyInputPanel from '../CurrencyInputPanel'\r\nimport AddressInputPanel from '../AddressInputPanel'\r\nimport OversizedPanel from '../OversizedPanel'\r\n\r\nimport TransactionDetails from '../TransactionDetails'\r\nimport ArrowDown from '../../assets/svg/SVGArrowDown'\r\nimport WarningCard from '../WarningCard'\r\n\r\nconst INPUT = 0\r\nconst OUTPUT = 1\r\n\r\nconst ETH_TO_TOKEN = 0\r\nconst TOKEN_TO_ETH = 1\r\nconst TOKEN_TO_TOKEN = 2\r\n\r\n// denominated in bips\r\nconst ALLOWED_SLIPPAGE_DEFAULT = 50\r\nconst TOKEN_ALLOWED_SLIPPAGE_DEFAULT = 50\r\n\r\n// 15 minutes, denominated in seconds\r\nconst DEFAULT_DEADLINE_FROM_NOW = 60 * 15\r\n\r\n// % above the calculated gas cost that we actually send, denominated in bips\r\nconst GAS_MARGIN = ethers.utils.bigNumberify(100000)\r\n\r\n\r\nconst DownArrowBackground = styled.div`\r\n  ${({ theme }) => theme.flexRowNoWrap}\r\n  justify-content: center;\r\n  align-items: center;\r\n`\r\n\r\nconst WrappedArrowDown = ({ clickable, active, ...rest }) => <ArrowDown {...rest} />\r\nconst DownArrow = styled(WrappedArrowDown)`\r\n  color: ${({ theme, active }) => (active ? theme.royalBlue : theme.chaliceGray)};\r\n  width: 0.625rem;\r\n  height: 0.625rem;\r\n  position: relative;\r\n  padding: 0.875rem;\r\n  cursor: ${({ clickable }) => clickable && 'pointer'};\r\n`\r\n\r\nconst ExchangeRateWrapper = styled.div`\r\n  ${({ theme }) => theme.flexRowNoWrap};\r\n  align-items: center;\r\n  color: ${({ theme }) => theme.doveGray};\r\n  font-size: 0.75rem;\r\n  padding: 0.5rem 1rem;\r\n`\r\n\r\nconst ExchangeRate = styled.span`\r\n  flex: 1 1 auto;\r\n  width: 0;\r\n  color: ${({ theme }) => theme.doveGray};\r\n`\r\n\r\nconst Flex = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  padding: 2rem;\r\n\r\n  button {\r\n    max-width: 20rem;\r\n  }\r\n`\r\n\r\nfunction calculateSlippageBounds(value, token = false, tokenAllowedSlippage, allowedSlippage) {\r\n  if (value) {\r\n    const offset = value.mul(token ? tokenAllowedSlippage : allowedSlippage).div(ethers.utils.bigNumberify(10000))\r\n    const minimum = value.sub(offset)\r\n    const maximum = value.add(offset)\r\n    return {\r\n      minimum: minimum.lt(ethers.constants.Zero) ? ethers.constants.Zero : minimum,\r\n      maximum: maximum.gt(ethers.constants.MaxUint256) ? ethers.constants.MaxUint256 : maximum\r\n    }\r\n  } else {\r\n    return {}\r\n  }\r\n}\r\n\r\nfunction getSwapType(inputCurrency, outputCurrency) {\r\n  if (!inputCurrency || !outputCurrency) {\r\n    return null\r\n  } else if (inputCurrency === 'ETH') {\r\n    return ETH_TO_TOKEN\r\n  } else if (outputCurrency === 'ETH') {\r\n    return TOKEN_TO_ETH\r\n  } else {\r\n    return TOKEN_TO_TOKEN\r\n  }\r\n}\r\n\r\n// this mocks the getInputPrice function, and calculates the required output\r\nfunction calculateEtherTokenOutputFromInput(inputAmount, inputReserve, outputReserve) {\r\n  const inputAmountWithFee = inputAmount.mul(ethers.utils.bigNumberify(997))\r\n  const numerator = inputAmountWithFee.mul(outputReserve)\r\n  const denominator = inputReserve.mul(ethers.utils.bigNumberify(1000)).add(inputAmountWithFee)\r\n  return numerator.div(denominator)\r\n}\r\n\r\n// this mocks the getOutputPrice function, and calculates the required input\r\nfunction calculateEtherTokenInputFromOutput(outputAmount, inputReserve, outputReserve) {\r\n  const numerator = inputReserve.mul(outputAmount).mul(ethers.utils.bigNumberify(1000))\r\n  const denominator = outputReserve.sub(outputAmount).mul(ethers.utils.bigNumberify(997))\r\n  return numerator.div(denominator).add(ethers.constants.One)\r\n}\r\n\r\nfunction getInitialSwapState(state) {\r\n  return {\r\n    independentValue: state.exactFieldURL && state.exactAmountURL ? state.exactAmountURL : '', // this is a user input\r\n    dependentValue: '', // this is a calculated number\r\n    independentField: state.exactFieldURL === 'output' ? OUTPUT : INPUT,\r\n    inputCurrency: state.inputCurrencyURL ? state.inputCurrencyURL : 'ETH',\r\n    outputCurrency: state.outputCurrencyURL\r\n      ? state.outputCurrencyURL === 'ETH'\r\n        ? state.inputCurrencyURL && state.inputCurrencyURL !== 'ETH'\r\n          ? 'ETH'\r\n          : ''\r\n        : state.outputCurrencyURL\r\n      : state.initialCurrency\r\n        ? state.initialCurrency\r\n        : ''\r\n  }\r\n}\r\n\r\nfunction swapStateReducer(state, action) {\r\n  switch (action.type) {\r\n    case 'FLIP_INDEPENDENT': {\r\n      const { independentField, inputCurrency, outputCurrency } = state\r\n      return {\r\n        ...state,\r\n        dependentValue: '',\r\n        independentField: independentField === INPUT ? OUTPUT : INPUT,\r\n        inputCurrency: outputCurrency,\r\n        outputCurrency: inputCurrency\r\n      }\r\n    }\r\n    case 'SELECT_CURRENCY': {\r\n      const { inputCurrency, outputCurrency } = state\r\n      const { field, currency } = action.payload\r\n\r\n      const newInputCurrency = field === INPUT ? currency : inputCurrency\r\n      const newOutputCurrency = field === OUTPUT ? currency : outputCurrency\r\n\r\n      if (newInputCurrency === newOutputCurrency) {\r\n        return {\r\n          ...state,\r\n          inputCurrency: field === INPUT ? currency : '',\r\n          outputCurrency: field === OUTPUT ? currency : ''\r\n        }\r\n      } else {\r\n        return {\r\n          ...state,\r\n          inputCurrency: newInputCurrency,\r\n          outputCurrency: newOutputCurrency\r\n        }\r\n      }\r\n    }\r\n    case 'UPDATE_INDEPENDENT': {\r\n      const { field, value } = action.payload\r\n      const { dependentValue, independentValue } = state\r\n      return {\r\n        ...state,\r\n        independentValue: value,\r\n        dependentValue: value === independentValue ? dependentValue : '',\r\n        independentField: field\r\n      }\r\n    }\r\n    case 'UPDATE_DEPENDENT': {\r\n      return {\r\n        ...state,\r\n        dependentValue: action.payload\r\n      }\r\n    }\r\n    default: {\r\n      return getInitialSwapState()\r\n    }\r\n  }\r\n}\r\n\r\nfunction getExchangeRate(inputValue, inputDecimals, outputValue, outputDecimals, invert = false) {\r\n  try {\r\n    if (\r\n      inputValue &&\r\n      (inputDecimals || inputDecimals === 0) &&\r\n      outputValue &&\r\n      (outputDecimals || outputDecimals === 0)\r\n    ) {\r\n      const factor = ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(18))\r\n\r\n      if (invert) {\r\n        return inputValue\r\n          .mul(factor)\r\n          .mul(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(outputDecimals)))\r\n          .div(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(inputDecimals)))\r\n          .div(outputValue)\r\n      } else {\r\n        return outputValue\r\n          .mul(factor)\r\n          .mul(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(inputDecimals)))\r\n          .div(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(outputDecimals)))\r\n          .div(inputValue)\r\n      }\r\n    }\r\n  } catch { }\r\n}\r\n\r\nfunction getMarketRate(\r\n  swapType,\r\n  inputReserveETH,\r\n  inputReserveToken,\r\n  inputDecimals,\r\n  outputReserveETH,\r\n  outputReserveToken,\r\n  outputDecimals,\r\n  invert = false\r\n) {\r\n  if (swapType === ETH_TO_TOKEN) {\r\n    return getExchangeRate(outputReserveETH, 18, outputReserveToken, outputDecimals, invert)\r\n  } else if (swapType === TOKEN_TO_ETH) {\r\n    return getExchangeRate(inputReserveToken, inputDecimals, inputReserveETH, 18, invert)\r\n  } else if (swapType === TOKEN_TO_TOKEN) {\r\n    const factor = ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(18))\r\n    const firstRate = getExchangeRate(inputReserveToken, inputDecimals, inputReserveETH, 18)\r\n    const secondRate = getExchangeRate(outputReserveETH, 18, outputReserveToken, outputDecimals)\r\n    try {\r\n      return !!(firstRate && secondRate) ? firstRate.mul(secondRate).div(factor) : undefined\r\n    } catch { }\r\n  }\r\n}\r\n\r\nexport default function ExchangePage({ initialCurrency, sending = false, params, nft = false }) {\r\n  const { t } = useTranslation()\r\n  const { account, chainId, library, error } = useWeb3React()\r\n\r\n  const urlAddedTokens = {}\r\n  if (params.inputCurrency) {\r\n    urlAddedTokens[params.inputCurrency] = true\r\n  }\r\n  if (params.outputCurrency) {\r\n    urlAddedTokens[params.outputCurrency] = true\r\n  }\r\n  if (isAddress(initialCurrency)) {\r\n    urlAddedTokens[initialCurrency] = true\r\n  }\r\n\r\n  const addTransaction = useTransactionAdder()\r\n\r\n  // check if URL specifies valid slippage, if so use as default\r\n  const initialSlippage = (token = false) => {\r\n    let slippage = Number.parseInt(params.slippage)\r\n    if (!isNaN(slippage) && (slippage === 0 || slippage >= 1)) {\r\n      return slippage // round to match custom input availability\r\n    }\r\n    // check for token <-> token slippage option\r\n    return token ? TOKEN_ALLOWED_SLIPPAGE_DEFAULT : ALLOWED_SLIPPAGE_DEFAULT\r\n  }\r\n\r\n  // check URL params for recipient, only on send page\r\n  const initialRecipient = () => {\r\n    if (sending && params.recipient) {\r\n      return params.recipient\r\n    }\r\n    return ''\r\n  }\r\n\r\n  var [brokenTokenWarning, setBrokenTokenWarning] = useState()\r\n\r\n  const [deadlineFromNow, setDeadlineFromNow] = useState(DEFAULT_DEADLINE_FROM_NOW)\r\n\r\n  const [rawSlippage, setRawSlippage] = useState(() => initialSlippage())\r\n  const [rawTokenSlippage, setRawTokenSlippage] = useState(() => initialSlippage(true))\r\n\r\n  const allowedSlippageBig = ethers.utils.bigNumberify(rawSlippage)\r\n  const tokenAllowedSlippageBig = ethers.utils.bigNumberify(rawTokenSlippage)\r\n\r\n  // analytics\r\n  useEffect(() => {\r\n    ReactGA.pageview(window.location.pathname + window.location.search)\r\n  }, [])\r\n\r\n  // core swap state\r\n  const [swapState, dispatchSwapState] = useReducer(\r\n    swapStateReducer,\r\n    {\r\n      initialCurrency: initialCurrency,\r\n      inputCurrencyURL: params.inputCurrency,\r\n      outputCurrencyURL: params.outputCurrency,\r\n      exactFieldURL: params.exactField,\r\n      exactAmountURL: params.exactAmount\r\n    },\r\n    getInitialSwapState\r\n  )\r\n\r\n  const { independentValue, dependentValue, independentField, inputCurrency, outputCurrency } = swapState\r\n  useEffect(() => {\r\n    setBrokenTokenWarning(false)\r\n    for (let i = 0; i < brokenTokens.length; i++) {\r\n      if (\r\n        brokenTokens[i].toLowerCase() === outputCurrency.toLowerCase() ||\r\n        brokenTokens[i].toLowerCase() === inputCurrency.toLowerCase()\r\n      ) {\r\n        setBrokenTokenWarning(true)\r\n      }\r\n    }\r\n  }, [outputCurrency, inputCurrency])\r\n\r\n  const [recipient, setRecipient] = useState({\r\n    address: initialRecipient(),\r\n    name: ''\r\n  })\r\n  const [recipientError, setRecipientError] = useState()\r\n\r\n  // get swap type from the currency types\r\n  const swapType = getSwapType(inputCurrency, outputCurrency)\r\n\r\n  // get decimals and exchange address for each of the currency types --> 1\r\n  const { symbol: inputSymbol, decimals: inputDecimals, exchangeAddress: inputExchangeAddress } = useTokenDetails(\r\n    inputCurrency\r\n  )\r\n  const { symbol: outputSymbol, decimals: outputDecimals, exchangeAddress: outputExchangeAddress } = useTokenDetails(\r\n    outputCurrency\r\n  )\r\n  // Uniswap/Compound don't support NFT\r\n  if ((inputSymbol === 'LAND') || (outputSymbol === 'LAND')) {\r\n    brokenTokenWarning = true;\r\n  }\r\n\r\n  const inputExchangeContract = useExchangeContract(inputExchangeAddress)\r\n  const outputExchangeContract = useExchangeContract(outputExchangeAddress)\r\n  //Since using only CDAI Currently so hard code for now\r\n  const ctokencontract = useCTokenContract('0xf190929858f5f6dC55A03B40C25545fE9c79CF8c')\r\n  const contract = swapType === ETH_TO_TOKEN ? outputExchangeContract : inputExchangeContract\r\n  const daiContract = useDAIContract(inputCurrency)\r\n\r\n\r\n  // get input allowance --> 2\r\n  const inputAllowance = useAddressAllowance(account, inputCurrency, inputExchangeAddress)\r\n\r\n  // fetch reserves for each of the currency types ---> 3\r\n  const { reserveETH: inputReserveETH, reserveToken: inputReserveToken } = useExchangeReserves(inputCurrency)\r\n  const { reserveETH: outputReserveETH, reserveToken: outputReserveToken } = useExchangeReserves(outputCurrency)\r\n\r\n  // get balances for each of the currency types\r\n  const inputBalance = useAddressBalance(account, inputCurrency)\r\n  const outputBalance = useAddressBalance(account, outputCurrency)\r\n  const inputBalanceFormatted = !!(inputBalance && Number.isInteger(inputDecimals))\r\n    ? amountFormatter(inputBalance, inputDecimals, Math.min(4, inputDecimals))\r\n    : ''\r\n  const outputBalanceFormatted = !!(outputBalance && Number.isInteger(outputDecimals))\r\n    ? amountFormatter(outputBalance, outputDecimals, Math.min(4, outputDecimals))\r\n    : ''\r\n\r\n  // compute useful transforms of the data above\r\n  const independentDecimals = independentField === INPUT ? inputDecimals : outputDecimals\r\n  const dependentDecimals = independentField === OUTPUT ? inputDecimals : outputDecimals\r\n\r\n  // declare/get parsed and formatted versions of input/output values\r\n  const [independentValueParsed, setIndependentValueParsed] = useState()\r\n  const dependentValueFormatted = !!(dependentValue && (dependentDecimals || dependentDecimals === 0))\r\n    ? amountFormatter(dependentValue, dependentDecimals, Math.min(4, dependentDecimals), false)\r\n    : ''\r\n  const inputValueParsed = independentField === INPUT ? independentValueParsed : dependentValue\r\n  const inputValueFormatted = independentField === INPUT ? independentValue : dependentValueFormatted\r\n  const outputValueParsed = independentField === OUTPUT ? independentValueParsed : dependentValue\r\n  const outputValueFormatted = independentField === OUTPUT ? independentValue : dependentValueFormatted\r\n\r\n\r\n  // validate + parse independent value\r\n  const [independentError, setIndependentError] = useState()\r\n  useEffect(() => {\r\n    if (independentValue && (independentDecimals || independentDecimals === 0)) {\r\n      try {\r\n        const parsedValue = ethers.utils.parseUnits(independentValue, independentDecimals)\r\n\r\n        if (parsedValue.lte(ethers.constants.Zero) || parsedValue.gte(ethers.constants.MaxUint256)) {\r\n          throw Error()\r\n        } else {\r\n          setIndependentValueParsed(parsedValue)\r\n          setIndependentError(null)\r\n        }\r\n      } catch {\r\n        setIndependentError(t('inputNotValid'))\r\n      }\r\n\r\n      return () => {\r\n        setIndependentValueParsed()\r\n        setIndependentError()\r\n      }\r\n    }\r\n  }, [independentValue, independentDecimals, t])\r\n\r\n  // calculate slippage from target rate\r\n  const { minimum: dependentValueMinumum, maximum: dependentValueMaximum } = calculateSlippageBounds(\r\n    dependentValue,\r\n    swapType === TOKEN_TO_TOKEN,\r\n    tokenAllowedSlippageBig,\r\n    allowedSlippageBig\r\n  )\r\n\r\n  // validate input allowance + balance\r\n  const [inputError, setInputError] = useState()\r\n  const [showUnlock, setShowUnlock] = useState(false)\r\n  useEffect(() => {\r\n    const inputValueCalculation = independentField === INPUT ? independentValueParsed : dependentValueMaximum\r\n    if (inputBalance && (inputAllowance || inputCurrency === 'ETH') && inputValueCalculation) {\r\n      if (inputBalance.lt(inputValueCalculation)) {\r\n        setInputError(t('insufficientBalance'))\r\n      } else if (inputCurrency !== 'ETH' && inputAllowance.lt(inputValueCalculation)) {\r\n        setInputError(t('unlockTokenCont'))\r\n        setShowUnlock(true)\r\n      } else {\r\n        setInputError(null)\r\n        setShowUnlock(false)\r\n      }\r\n      return () => {\r\n        setInputError()\r\n        setShowUnlock(false)\r\n      }\r\n    }\r\n  }, [independentField, independentValueParsed, dependentValueMaximum, inputBalance, inputCurrency, inputAllowance, t])\r\n\r\n  // calculate dependent value --> 4\r\n  useEffect(() => {\r\n    const amount = independentValueParsed\r\n\r\n    if (swapType === ETH_TO_TOKEN) {\r\n      const reserveETH = outputReserveETH\r\n      const reserveToken = outputReserveToken\r\n\r\n      if (amount && reserveETH && reserveToken) {\r\n        try {\r\n          const calculatedDependentValue =\r\n            independentField === INPUT\r\n              ? calculateEtherTokenOutputFromInput(amount, reserveETH, reserveToken)\r\n              : calculateEtherTokenInputFromOutput(amount, reserveETH, reserveToken)\r\n\r\n          if (calculatedDependentValue.lte(ethers.constants.Zero)) {\r\n            throw Error()\r\n          }\r\n\r\n          dispatchSwapState({\r\n            type: 'UPDATE_DEPENDENT',\r\n            payload: calculatedDependentValue\r\n          })\r\n        } catch {\r\n          setIndependentError(t('insufficientLiquidity'))\r\n        }\r\n        return () => {\r\n          dispatchSwapState({ type: 'UPDATE_DEPENDENT', payload: '' })\r\n        }\r\n      }\r\n    } else if (swapType === TOKEN_TO_ETH) {\r\n      const reserveETH = inputReserveETH\r\n      const reserveToken = inputReserveToken\r\n\r\n      if (amount && reserveETH && reserveToken) {\r\n        try {\r\n          const calculatedDependentValue =\r\n            independentField === INPUT\r\n              ? calculateEtherTokenOutputFromInput(amount, reserveToken, reserveETH)\r\n              : calculateEtherTokenInputFromOutput(amount, reserveToken, reserveETH)\r\n\r\n          if (calculatedDependentValue.lte(ethers.constants.Zero)) {\r\n            throw Error()\r\n          }\r\n\r\n          dispatchSwapState({\r\n            type: 'UPDATE_DEPENDENT',\r\n            payload: calculatedDependentValue\r\n          })\r\n        } catch {\r\n          setIndependentError(t('insufficientLiquidity'))\r\n        }\r\n        return () => {\r\n          dispatchSwapState({ type: 'UPDATE_DEPENDENT', payload: '' })\r\n        }\r\n      }\r\n    } else if (swapType === TOKEN_TO_TOKEN) {\r\n      const reserveETHFirst = inputReserveETH\r\n      const reserveTokenFirst = inputReserveToken\r\n\r\n      const reserveETHSecond = outputReserveETH\r\n      const reserveTokenSecond = outputReserveToken\r\n\r\n      if (amount && reserveETHFirst && reserveTokenFirst && reserveETHSecond && reserveTokenSecond) {\r\n        try {\r\n          if (independentField === INPUT) {\r\n            const intermediateValue = calculateEtherTokenOutputFromInput(amount, reserveTokenFirst, reserveETHFirst)\r\n            if (outputSymbol != 'CDAI' && intermediateValue.lte(ethers.constants.Zero)) {\r\n              throw Error()\r\n            }\r\n            var calculatedDependentValue = calculateEtherTokenOutputFromInput(\r\n              intermediateValue,\r\n              reserveETHSecond,\r\n              reserveTokenSecond\r\n            )\r\n            if (outputSymbol != 'CDAI' && calculatedDependentValue.lte(ethers.constants.Zero)) {\r\n              throw Error()\r\n            }\r\n            dispatchSwapState({\r\n              type: 'UPDATE_DEPENDENT',\r\n              payload: calculatedDependentValue\r\n            })\r\n          } else {\r\n            const intermediateValue = calculateEtherTokenInputFromOutput(amount, reserveETHSecond, reserveTokenSecond)\r\n            if (outputSymbol != 'CDAI' && intermediateValue.lte(ethers.constants.Zero)) {\r\n              throw Error()\r\n            }\r\n            var calculatedDependentValue = calculateEtherTokenInputFromOutput(\r\n              intermediateValue,\r\n              reserveTokenFirst,\r\n              reserveETHFirst\r\n            )\r\n            if (outputSymbol != 'CDAI' && calculatedDependentValue.lte(ethers.constants.Zero)) {\r\n              throw Error()\r\n            }\r\n            dispatchSwapState({\r\n              type: 'UPDATE_DEPENDENT',\r\n              payload: calculatedDependentValue\r\n            })\r\n          }\r\n        } catch {\r\n          setIndependentError(t('insufficientLiquidity'))\r\n        }\r\n        return () => {\r\n          dispatchSwapState({ type: 'UPDATE_DEPENDENT', payload: '' })\r\n        }\r\n      }\r\n    }\r\n  }, [\r\n    independentValueParsed,\r\n    swapType,\r\n    outputReserveETH,\r\n    outputReserveToken,\r\n    inputReserveETH,\r\n    inputReserveToken,\r\n    independentField,\r\n    t\r\n  ])\r\n\r\n  useEffect(() => {\r\n    const history = createBrowserHistory()\r\n    history.push(window.location.pathname + '')\r\n  }, [])\r\n  // 5 calculating exchange rate\r\n  const [inverted, setInverted] = useState(false)\r\n  const exchangeRate = getExchangeRate(inputValueParsed, inputDecimals, outputValueParsed, outputDecimals)\r\n  const exchangeRateInverted = getExchangeRate(inputValueParsed, inputDecimals, outputValueParsed, outputDecimals, true)\r\n  if (inputSymbol === 'CDAI' || outputSymbol === 'CDAI') {\r\n    if (sending) {\r\n      brokenTokenWarning = true\r\n    }\r\n  }\r\n\r\n  if ((inputSymbol == 'CDAI' && outputSymbol != 'DAI') || (inputSymbol != 'DAI' && outputSymbol == 'CDAI')) {\r\n    brokenTokenWarning = true\r\n  }\r\n  const marketRate = getMarketRate(\r\n    swapType,\r\n    inputReserveETH,\r\n    inputReserveToken,\r\n    inputDecimals,\r\n    outputReserveETH,\r\n    outputReserveToken,\r\n    outputDecimals\r\n  )\r\n\r\n  const percentSlippage =\r\n    exchangeRate && marketRate && !marketRate.isZero()\r\n      ? exchangeRate\r\n        .sub(marketRate)\r\n        .abs()\r\n        .mul(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(18)))\r\n        .div(marketRate)\r\n        .sub(ethers.utils.bigNumberify(3).mul(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(15))))\r\n      : undefined\r\n  const percentSlippageFormatted = percentSlippage && amountFormatter(percentSlippage, 16, 2)\r\n  const slippageWarning =\r\n    percentSlippage &&\r\n    percentSlippage.gte(ethers.utils.parseEther('.05')) &&\r\n    percentSlippage.lt(ethers.utils.parseEther('.2')) // [5% - 20%)\r\n  const highSlippageWarning = percentSlippage && percentSlippage.gte(ethers.utils.parseEther('.2')) // [20+%\r\n\r\n\r\n\r\n\r\n\r\n  const isValid = sending\r\n    ? exchangeRate && inputError === null && independentError === null && recipientError === null && deadlineFromNow\r\n    : exchangeRate && inputError === null && independentError === null && deadlineFromNow\r\n\r\n  const estimatedText = `(${t('estimated')})`\r\n  function formatBalance(value) {\r\n    return `Balance: ${value}`\r\n  }\r\n\r\n\r\n  async function onSwap() {\r\n    //if user changed deadline, log new one in minutes\r\n    if (deadlineFromNow !== DEFAULT_DEADLINE_FROM_NOW) {\r\n      ReactGA.event({\r\n        category: 'Advanced Interaction',\r\n        action: 'Set Custom Deadline',\r\n        value: deadlineFromNow / 60\r\n      })\r\n    }\r\n\r\n    const deadline = Math.ceil(Date.now() / 1000) + deadlineFromNow\r\n\r\n    // if user has changed slippage, log\r\n    if (swapType === TOKEN_TO_TOKEN) {\r\n      if (parseInt(tokenAllowedSlippageBig.toString()) !== TOKEN_ALLOWED_SLIPPAGE_DEFAULT) {\r\n        ReactGA.event({\r\n          category: 'Advanced Interaction',\r\n          action: 'Set Custom Slippage',\r\n          value: parseInt(tokenAllowedSlippageBig.toString())\r\n        })\r\n      }\r\n    } else {\r\n      if (parseInt(allowedSlippageBig.toString()) !== ALLOWED_SLIPPAGE_DEFAULT) {\r\n        ReactGA.event({\r\n          category: 'Advanced Interaction',\r\n          action: 'Set Custom Slippage',\r\n          value: parseInt(allowedSlippageBig.toString())\r\n        })\r\n      }\r\n    }\r\n\r\n    let estimate, method, args, value\r\n\r\n    let inputEthPerToken = 1\r\n    if (inputCurrency !== 'ETH') {\r\n      inputEthPerToken = inputReserveToken && inputReserveETH ? inputReserveETH / inputReserveToken : null\r\n    }\r\n    let ethTransactionSize = inputEthPerToken * inputValueFormatted\r\n\r\n    // params for GA event\r\n    let action = ''\r\n    let label = ''\r\n    if (outputSymbol == 'CDAI' && inputSymbol == 'DAI' && !sending) {\r\n      //Aprrovong Dai as well here\r\n      estimate = daiContract.estimate.approve\r\n      method = daiContract.approve\r\n      args = [outputCurrency, independentValueParsed]\r\n      value = ethers.constants.Zero\r\n      //calling approve function\r\n      const estimatedGasLimit = await estimate(...args, { value })\r\n      method(...args, {\r\n        value,\r\n        gasLimit: calculateGasMargin(estimatedGasLimit, GAS_MARGIN)\r\n      }).then(response => {\r\n        addTransaction(response)\r\n      })\r\n      //Setting Mint Parameters\r\n      estimate = ctokencontract.estimate.mint\r\n      method = ctokencontract.mint\r\n      args = [independentValueParsed]\r\n      value = ethers.constants.Zero\r\n    } else if (outputSymbol == 'DAI' && inputSymbol == 'CDAI' && !sending) {\r\n      //Redeeming in this case\r\n      let snapshot = await getAccountSnapshot(account, inputCurrency, library)\r\n      let ctokenBalance = snapshot[1].toString()\r\n      if (ctokenBalance < independentValueParsed) {\r\n        brokenTokenWarning = true\r\n      }\r\n      estimate = ctokencontract.estimate.redeem\r\n      method = ctokencontract.redeem\r\n      args = [independentValueParsed]\r\n      value = ethers.constants.Zero\r\n    }\r\n    else {\r\n      if (independentField === INPUT) {\r\n        // set GA params\r\n        action = sending ? 'SendInput' : 'SwapInput'\r\n        label = outputCurrency\r\n        if (swapType === ETH_TO_TOKEN) {\r\n          estimate = sending ? contract.estimate.ethToTokenTransferInput : contract.estimate.ethToTokenSwapInput\r\n          method = sending ? contract.ethToTokenTransferInput : contract.ethToTokenSwapInput\r\n          args = sending ? [dependentValueMinumum, deadline, recipient.address] : [dependentValueMinumum, deadline]\r\n          value = independentValueParsed\r\n        } else if (swapType === TOKEN_TO_ETH) {\r\n          estimate = sending ? contract.estimate.tokenToEthTransferInput : contract.estimate.tokenToEthSwapInput\r\n          method = sending ? contract.tokenToEthTransferInput : contract.tokenToEthSwapInput\r\n          args = sending\r\n            ? [independentValueParsed, dependentValueMinumum, deadline, recipient.address]\r\n            : [independentValueParsed, dependentValueMinumum, deadline]\r\n          value = ethers.constants.Zero\r\n        } else if (swapType === TOKEN_TO_TOKEN) {\r\n          estimate = sending ? contract.estimate.tokenToTokenTransferInput : contract.estimate.tokenToTokenSwapInput\r\n          method = sending ? contract.tokenToTokenTransferInput : contract.tokenToTokenSwapInput\r\n          args = sending\r\n            ? [\r\n              independentValueParsed,\r\n              dependentValueMinumum,\r\n              ethers.constants.One,\r\n              deadline,\r\n              recipient.address,\r\n              outputCurrency\r\n            ]\r\n            : [independentValueParsed, dependentValueMinumum, ethers.constants.One, deadline, outputCurrency]\r\n          value = ethers.constants.Zero\r\n        }\r\n      } else if (independentField === OUTPUT) {\r\n        // set GA params\r\n        action = sending ? 'SendOutput' : 'SwapOutput'\r\n        label = outputCurrency\r\n\r\n        if (swapType === ETH_TO_TOKEN) {\r\n          estimate = sending ? contract.estimate.ethToTokenTransferOutput : contract.estimate.ethToTokenSwapOutput\r\n          method = sending ? contract.ethToTokenTransferOutput : contract.ethToTokenSwapOutput\r\n          args = sending ? [independentValueParsed, deadline, recipient.address] : [independentValueParsed, deadline]\r\n          value = dependentValueMaximum\r\n        } else if (swapType === TOKEN_TO_ETH) {\r\n          estimate = sending ? contract.estimate.tokenToEthTransferOutput : contract.estimate.tokenToEthSwapOutput\r\n          method = sending ? contract.tokenToEthTransferOutput : contract.tokenToEthSwapOutput\r\n          args = sending\r\n            ? [independentValueParsed, dependentValueMaximum, deadline, recipient.address]\r\n            : [independentValueParsed, dependentValueMaximum, deadline]\r\n          value = ethers.constants.Zero\r\n        } else if (swapType === TOKEN_TO_TOKEN) {\r\n          estimate = sending ? contract.estimate.tokenToTokenTransferOutput : contract.estimate.tokenToTokenSwapOutput\r\n          method = sending ? contract.tokenToTokenTransferOutput : contract.tokenToTokenSwapOutput\r\n          args = sending\r\n            ? [\r\n              independentValueParsed,\r\n              dependentValueMaximum,\r\n              ethers.constants.MaxUint256,\r\n              deadline,\r\n              recipient.address,\r\n              outputCurrency\r\n            ]\r\n            : [independentValueParsed, dependentValueMaximum, ethers.constants.MaxUint256, deadline, outputCurrency]\r\n          value = ethers.constants.Zero\r\n        }\r\n      }\r\n    }\r\n    const estimatedGasLimit = await estimate(...args, { value })\r\n    method(...args, {\r\n      value,\r\n      gasLimit: calculateGasMargin(estimatedGasLimit, GAS_MARGIN)\r\n    }).then(response => {\r\n      addTransaction(response)\r\n      ReactGA.event({\r\n        category: 'Transaction',\r\n        action: action,\r\n        label: label,\r\n        value: ethTransactionSize,\r\n        dimension1: response.hash\r\n      })\r\n      ReactGA.event({\r\n        category: 'Hash',\r\n        action: response.hash,\r\n        label: ethTransactionSize.toString()\r\n      })\r\n    })\r\n  }\r\n\r\n\r\n  const [customSlippageError, setcustomSlippageError] = useState('')\r\n\r\n  const toggleWalletModal = useWalletModalToggle()\r\n\r\n  const newInputDetected =\r\n    inputCurrency !== 'ETH' && inputCurrency && !INITIAL_TOKENS_CONTEXT[chainId].hasOwnProperty(inputCurrency)\r\n\r\n  const newOutputDetected =\r\n    outputCurrency !== 'ETH' && outputCurrency && !INITIAL_TOKENS_CONTEXT[chainId].hasOwnProperty(outputCurrency)\r\n\r\n  const [showInputWarning, setShowInputWarning] = useState(false)\r\n  const [showOutputWarning, setShowOutputWarning] = useState(false)\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    if (newInputDetected) {\r\n      setShowInputWarning(true)\r\n    } else {\r\n      setShowInputWarning(false)\r\n    }\r\n  }, [newInputDetected, setShowInputWarning])\r\n\r\n  useEffect(() => {\r\n    if (newOutputDetected) {\r\n      setShowOutputWarning(true)\r\n    } else {\r\n      setShowOutputWarning(false)\r\n    }\r\n  }, [newOutputDetected, setShowOutputWarning])\r\n\r\n  return (\r\n    <>\r\n      {showInputWarning && (\r\n        <WarningCard\r\n          onDismiss={() => {\r\n            setShowInputWarning(false)\r\n          }}\r\n          urlAddedTokens={urlAddedTokens}\r\n          currency={inputCurrency}\r\n        />\r\n      )}\r\n      {showOutputWarning && (\r\n        <WarningCard\r\n          onDismiss={() => {\r\n            setShowOutputWarning(false)\r\n          }}\r\n          urlAddedTokens={urlAddedTokens}\r\n          currency={outputCurrency}\r\n        />\r\n      )}\r\n      <CurrencyInputPanel\r\n        title={t('input')}\r\n        urlAddedTokens={urlAddedTokens}\r\n        description={inputValueFormatted && independentField === OUTPUT ? estimatedText : ''}\r\n        extraText={inputBalanceFormatted && formatBalance(inputBalanceFormatted)}\r\n        extraTextClickHander={() => {\r\n          if (inputBalance && inputDecimals) {\r\n            const valueToSet = inputCurrency === 'ETH' ? inputBalance.sub(ethers.utils.parseEther('.1')) : inputBalance\r\n            if (valueToSet.gt(ethers.constants.Zero)) {\r\n              dispatchSwapState({\r\n                type: 'UPDATE_INDEPENDENT',\r\n                payload: {\r\n                  value: amountFormatter(valueToSet, inputDecimals, inputDecimals, false),\r\n                  field: INPUT\r\n                }\r\n              })\r\n            }\r\n          }\r\n        }}\r\n        onCurrencySelected={inputCurrency => {\r\n          dispatchSwapState({\r\n            type: 'SELECT_CURRENCY',\r\n            payload: { currency: inputCurrency, field: INPUT }\r\n          })\r\n        }}\r\n        onValueChange={inputValue => {\r\n          dispatchSwapState({\r\n            type: 'UPDATE_INDEPENDENT',\r\n            payload: { value: inputValue, field: INPUT }\r\n          })\r\n        }}\r\n        showUnlock={showUnlock}\r\n        selectedTokens={[inputCurrency, outputCurrency]}\r\n        selectedTokenAddress={inputCurrency}\r\n        value={inputValueFormatted}\r\n        errorMessage={inputError ? inputError : independentField === INPUT ? independentError : ''}\r\n      />\r\n      <OversizedPanel>\r\n        <DownArrowBackground>\r\n          <DownArrow\r\n            onClick={() => {\r\n              dispatchSwapState({ type: 'FLIP_INDEPENDENT' })\r\n            }}\r\n            clickable\r\n            alt=\"swap\"\r\n            active={isValid}\r\n          />\r\n        </DownArrowBackground>\r\n      </OversizedPanel>\r\n      <CurrencyInputPanel\r\n        title={t('output')}\r\n        description={outputValueFormatted && independentField === INPUT ? estimatedText : ''}\r\n        extraText={outputBalanceFormatted && formatBalance(outputBalanceFormatted)}\r\n        urlAddedTokens={urlAddedTokens}\r\n        onCurrencySelected={outputCurrency => {\r\n          dispatchSwapState({\r\n            type: 'SELECT_CURRENCY',\r\n            payload: { currency: outputCurrency, field: OUTPUT }\r\n          })\r\n        }}\r\n        onValueChange={outputValue => {\r\n          dispatchSwapState({\r\n            type: 'UPDATE_INDEPENDENT',\r\n            payload: { value: outputValue, field: OUTPUT }\r\n          })\r\n        }}\r\n        selectedTokens={[inputCurrency, outputCurrency]}\r\n        selectedTokenAddress={outputCurrency}\r\n        value={outputValueFormatted}\r\n        errorMessage={independentField === OUTPUT ? independentError : ''}\r\n        disableUnlock\r\n      />\r\n      {sending ? (\r\n        <>\r\n          <OversizedPanel>\r\n            <DownArrowBackground>\r\n              <DownArrow active={isValid} alt=\"arrow\" />\r\n            </DownArrowBackground>\r\n          </OversizedPanel>\r\n          <AddressInputPanel onChange={setRecipient} onError={setRecipientError} initialInput={recipient} />\r\n        </>\r\n      ) : (\r\n          ''\r\n        )}\r\n      <OversizedPanel hideBottom>\r\n        <ExchangeRateWrapper\r\n          onClick={() => {\r\n            setInverted(inverted => !inverted)\r\n          }}\r\n        >\r\n          <ExchangeRate>{t('exchangeRate')}</ExchangeRate>\r\n          {inverted ? (\r\n            <span>\r\n              {exchangeRate\r\n                ? `1 ${inputSymbol} = ${amountFormatter(exchangeRate, 18, 6, false)} ${outputSymbol}`\r\n                : ' 0 '}\r\n            </span>\r\n          ) : (\r\n              <span>\r\n                {exchangeRate\r\n                  ? `1 ${outputSymbol} = ${amountFormatter(exchangeRateInverted, 18, 6, false)} ${inputSymbol}`\r\n                  : ' 0 '}\r\n              </span>\r\n            )}\r\n        </ExchangeRateWrapper>\r\n      </OversizedPanel>\r\n      <TransactionDetails\r\n        account={account}\r\n        setRawSlippage={setRawSlippage}\r\n        setRawTokenSlippage={setRawTokenSlippage}\r\n        rawSlippage={rawSlippage}\r\n        slippageWarning={slippageWarning}\r\n        highSlippageWarning={highSlippageWarning}\r\n        brokenTokenWarning={brokenTokenWarning}\r\n        setDeadline={setDeadlineFromNow}\r\n        deadline={deadlineFromNow}\r\n        inputError={inputError}\r\n        independentError={independentError}\r\n        inputCurrency={inputCurrency}\r\n        outputCurrency={outputCurrency}\r\n        independentValue={independentValue}\r\n        independentValueParsed={independentValueParsed}\r\n        independentField={independentField}\r\n        INPUT={INPUT}\r\n        inputValueParsed={inputValueParsed}\r\n        outputValueParsed={outputValueParsed}\r\n        inputSymbol={inputSymbol}\r\n        outputSymbol={outputSymbol}\r\n        dependentValueMinumum={dependentValueMinumum}\r\n        dependentValueMaximum={dependentValueMaximum}\r\n        dependentDecimals={dependentDecimals}\r\n        independentDecimals={independentDecimals}\r\n        percentSlippageFormatted={percentSlippageFormatted}\r\n        setcustomSlippageError={setcustomSlippageError}\r\n        recipientAddress={recipient.address}\r\n        sending={sending}\r\n      />\r\n      <Flex>\r\n        <Button\r\n          disabled={\r\n            brokenTokenWarning ? true : !account && !error ? false : !isValid || customSlippageError === 'invalid'\r\n          }\r\n          onClick={account && !error ? onSwap : toggleWalletModal}\r\n          warning={highSlippageWarning || customSlippageError === 'warning'}\r\n          loggedOut={!account}\r\n        >\r\n          {brokenTokenWarning\r\n            ? 'Swap'\r\n            : !account\r\n              ? t('connectToWallet')\r\n              : sending\r\n                ? highSlippageWarning || customSlippageError === 'warning'\r\n                  ? t('sendAnyway')\r\n                  : t('send')\r\n                : highSlippageWarning || customSlippageError === 'warning'\r\n                  ? t('swapAnyway')\r\n                  : t('swap')}\r\n        </Button>\r\n      </Flex>\r\n    </>\r\n  )\r\n}"],"sourceRoot":""}